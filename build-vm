#!/bin/bash
# Build virtual machine images (cloud image, vagrant boxes)

# nounset: "Treat unset variables and parameters [...] as an error when performing parameter expansion."
# errexit: "Exit immediately if [...] command exits with a non-zero status."
set -o nounset -o errexit
shopt -s extglob

function init() {
  readonly ORIG_PWD="${PWD}"
  readonly OUTPUT="${PWD}/output"
  readonly BASE_DIR="${PWD}/base"
  local tmpdir
  tmpdir="$(mktemp --dry-run --directory --tmpdir="${PWD}/tmp")"
  readonly TMPDIR="${tmpdir}"
  mkdir -p "${OUTPUT}" "${TMPDIR}" "${BASE_DIR}"
}

# Do some cleanup when the script exits
function cleanup() {
  # We want all the commands to run, even if one of them fails.
  set +o errexit
  if [ -n "${TMPDIR:-}" ]; then
    rm -rf "${TMPDIR}"
  fi
}
trap cleanup EXIT

# Helper function: download source image
# ${1} - destination
# ${2} - source url
function download_source() {
  # Skip if the image already exists
  if [ -f "${1}" ]; then
    echo "Base image already exists at ${1}, skipping download."
    return 0
  fi

  echo "Downloading ${2}..."
  wget -c -q -O "${1}" "${2}" 
  echo "Download complete: ${1}"
  return 0
}

# ${1} - Distro (ubuntu, rocky, etc.)
# ${2} - Flavor (pku, eda, etc.)
# ${3} - Optional build version. If not set, will generate a default based on date.
function main() {
  init

  # Check if distro and flavor are provided
  if [ -z "${1:-}" ] || [ -z "${2:-}" ]; then
    echo "ERROR: Distro and flavor must be specified!"
    echo "Usage: $0 <distro> <flavor> [build_version]"
    exit 1
  fi

  local distro="${1}"
  local flavor="${2}"

  local build_version
  if [ -z "${3:-}" ]; then
    build_version="$(date +%Y%m%d)"
  else
    build_version="${3}"
  fi

  echo "Building distro: ${distro} flavor: ${flavor} version: ${build_version}"
  
  # Check if the distro and flavor directories exist
  if [ ! -f "${ORIG_PWD}/images/${distro}/distro.conf" ]; then
    echo "ERROR: Distro '${distro}' not found in images directory!"
    exit 1
  fi
  
  if [ ! -f "${ORIG_PWD}/images/${distro}/${flavor}/flavor.conf" ]; then
    echo "ERROR: Flavor '${flavor}' not found for distro '${distro}'!"
    exit 1
  fi

  source "${ORIG_PWD}/images/${distro}/distro.conf"

  DISTRO_BASE_IMAGE="${BASE_DIR}/${distro}.img"

  download_source "${DISTRO_BASE_IMAGE}" "${SOURCE_URL}"

  DISTRO_ROOT="${ORIG_PWD}/images/${distro}"
  FLAVOR_ROOT="${ORIG_PWD}/images/${distro}/${flavor}"
  
  opts=()

  if [[ -f "${DISTRO_ROOT}/pre_commands" ]]; then
    opts+=(--commands-from-file=${DISTRO_ROOT}/pre_commands)
  fi

  if [ 0 -lt "${#PACKAGES[@]}" ]; then
    PACKAGES_STRING=$(printf "%s," "${PACKAGES[@]}")
    PACKAGES_STRING=${PACKAGES_STRING%,} 
    opts+=(--install=${PACKAGES_STRING})
  fi

  source "${ORIG_PWD}/images/${distro}/${flavor}/flavor.conf"

  if [[ -f "${FLAVOR_ROOT}/pre_commands" ]]; then
    opts+=(--commands-from-file=${FLAVOR_ROOT}/pre_commands)
  fi
  if [ 0 -lt "${#PACKAGES[@]}" ]; then
    PACKAGES_STRING=$(printf "%s," "${PACKAGES[@]}")
    PACKAGES_STRING=${PACKAGES_STRING%,} 
    opts+=(--install=${PACKAGES_STRING})
  fi
  if [[ -f "${FLAVOR_ROOT}/post_commands" ]]; then
    opts+=(--commands-from-file=${FLAVOR_ROOT}/post_commands)
  fi

  if [[ -f "${DISTRO_ROOT}/post_commands" ]]; then
    opts+=(--commands-from-file=${DISTRO_ROOT}/post_commands)
  fi

  BASE_IMAGE=""

  if [ -n "${DISK_SIZE:-}" ]; then
    BASE_IMAGE="${BASE_DIR}/${distro}-${flavor}-${DISK_SIZE}.img"
    if [ ! -f "${BASE_IMAGE}" ]; then
      echo "Resizing base image by ${DISK_SIZE}"
      truncate -r  "${DISTRO_BASE_IMAGE}" "${BASE_IMAGE}"
      truncate -s ${DISK_SIZE} "${BASE_IMAGE}"
      virt-resize --expand "${PART_TO_GROW}" "${DISTRO_BASE_IMAGE}" "${BASE_IMAGE}"
      echo "Resized ${BASE_IMAGE} by ${DISK_SIZE}"
    else 
      echo "Base image already resized. Skipping..."
    fi
  else
    BASE_IMAGE="${DISTRO_BASE_IMAGE}"
  fi

  TMPIMG="${TMPDIR}/${distro}-${flavor}-${build_version}.qcow2"
  cp -a "${BASE_IMAGE}" ${TMPIMG}

  echo "Start virt-customize..."
  echo "+ virt-customize --format auto -a ${TMPIMG} ${opts[@]}"
  virt-customize --format auto -a "${TMPIMG}" "${opts[@]}"
  
  echo "Finishing..."
  sha256sum "${TMPIMG}" > "${TMPIMG}.SHA256"
  mv "${TMPIMG}"{,.SHA256} "${OUTPUT}/"
  echo "Saved image to ${OUTPUT}/${distro}-${flavor}-${build_version}.qcow2"
}

main "$@"