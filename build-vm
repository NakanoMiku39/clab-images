#!/bin/bash
# Build virtual machine images (cloud image, vagrant boxes)

# nounset: "Treat unset variables and parameters [...] as an error when performing parameter expansion."
# errexit: "Exit immediately if [...] command exits with a non-zero status."
set -o nounset -o errexit
shopt -s extglob

function init() {
  readonly ORIG_PWD="${PWD}"
  readonly OUTPUT="${PWD}/output"
  readonly BASE_DIR="${PWD}/base"
  local tmpdir
  tmpdir="$(mktemp --dry-run --directory --tmpdir="${PWD}/tmp")"
  readonly TMPDIR="${tmpdir}"
  mkdir -p "${OUTPUT}" "${TMPDIR}" "${BASE_DIR}"
}

# Do some cleanup when the script exits
function cleanup() {
  # We want all the commands to run, even if one of them fails.
  set +o errexit
  if [ -n "${TMPDIR:-}" ]; then
    rm -rf "${TMPDIR}"
  fi
}
trap cleanup EXIT

# Helper function: download source image
# ${1} - destination
# ${2} - source url
function download_source() {
  # Skip if the image already exists
  if [ -f "${1}.ok" ] && [ -f "${1}" ]; then
    echo "Base image already exists at ${1}, skipping download."
    return 0
  fi

  echo "Downloading ${2}..."
  rm -f "${1}"
  wget -q -O "${1}" "${2}" 
  touch "${1}.ok"
  echo "Downloaded ${1}"
  return 0
}

# ${1} - Distro (ubuntu, rocky, etc.)
# ${2} - Flavor (pku, eda, etc.)
# ${3} - Optional build version. If not set, will generate a default based on date.
function main() {
  init

  # Check if distro and flavor are provided
  if [ -z "${1:-}" ] || [ -z "${2:-}" ]; then
    echo "ERROR: Distro and flavor must be specified!"
    echo "Usage: $0 <distro> <flavor> [build_version]"
    exit 1
  fi

  local distro="${1}"
  local flavor="${2}"

  local build_version
  if [ -z "${3:-}" ]; then
    build_version="$(date +%Y%m%d)"
  else
    build_version="${3}"
  fi

  # Check if the distro and flavor directories exist
  if [ ! -f "${ORIG_PWD}/images/${distro}/distro.conf" ]; then
    echo "ERROR: Distro '${distro}' not found in images directory!"
    exit 1
  fi
  
  if [ ! -f "${ORIG_PWD}/images/${distro}/${flavor}/flavor.conf" ]; then
    echo "ERROR: Flavor '${flavor}' not found for distro '${distro}'!"
    exit 1
  fi

  echo "Start building..."
  echo " - distro: ${distro}"
  echo " - flavor: ${flavor}"
  echo " - version: ${build_version}"
  if [[ ! -n "${NO_DEFAULT:-}" ]]; then
    echo " - use_default: yes"
  else
    echo " - use_default: no"
  fi

  PACKAGES=()
  source "${ORIG_PWD}/images/${distro}/distro.conf"

  local distro_base_image="${BASE_DIR}/${distro}.img"

  download_source "${distro_base_image}" "${SOURCE_URL}"

  local distro_root="${ORIG_PWD}/images/${distro}"
  local flavor_root="${ORIG_PWD}/images/${distro}/${flavor}"
  
  local opts=()

  if [[ ! -n "${NO_DEFAULT:-}" ]]; then
    if [[ -f "${ORIG_PWD}/images/default/pre_commands" ]]; then
      opts+=(--commands-from-file=${ORIG_PWD}/images/default/pre_commands)
    fi
  fi

  if [[ -f "${distro_root}/pre_commands" ]]; then
    opts+=(--commands-from-file=${distro_root}/pre_commands)
  fi

  if [ 0 -lt "${#PACKAGES[@]}" ]; then
    local packages_string=$(printf "%s," "${PACKAGES[@]}")
    packages_string=${packages_string%,} 
    opts+=(--install=${packages_string})
  fi

  PACKAGES=()
  source "${ORIG_PWD}/images/${distro}/${flavor}/flavor.conf"

  if [[ -f "${flavor_root}/pre_commands" ]]; then
    opts+=(--commands-from-file=${flavor_root}/pre_commands)
  fi
  if [ 0 -lt "${#PACKAGES[@]}" ]; then
    local packages_string=$(printf "%s," "${PACKAGES[@]}")
    packages_string=${packages_string%,} 
    opts+=(--install=${packages_string})
  fi
  if [[ -f "${flavor_root}/post_commands" ]]; then
    opts+=(--commands-from-file=${flavor_root}/post_commands)
  fi

  if [[ -f "${distro_root}/post_commands" ]]; then
    opts+=(--commands-from-file=${distro_root}/post_commands)
  fi

  if [[ ! -n "${NO_DEFAULT:-}" ]]; then
    if [[ -f "${ORIG_PWD}/images/default/post_commands" ]]; then
      opts+=(--commands-from-file=${ORIG_PWD}/images/default/post_commands)
    fi
  fi

  local base_image

  if [ -n "${DISK_SIZE:-}" ]; then
    base_image="${BASE_DIR}/${distro}-${flavor}-${DISK_SIZE}.img"
    if [ -f "${base_image}.ok" ] && [ -f "${base_image}" ]; then
      echo "Base image already resized. Skipping..."
    else 
      echo "Resizing base image by ${DISK_SIZE}..."
      rm -f "${base_image}"
      qemu-img create -f qcow2 -o preallocation=metadata "${base_image}" "${DISK_SIZE}"
      virt-resize --expand "${PART_TO_GROW}" "${distro_base_image}" "${base_image}"
      touch "${base_image}.ok"
      echo "Resized ${base_image} by ${DISK_SIZE}"
    fi
  else
    base_image="${distro_base_image}"
  fi

  if [ -n "${MEMORY:-}" ]; then
    opts+=(--memsize=${MEMORY})
  fi

  if [ -n "${CPU:-}" ]; then
    opts+=(--smp=${CPU})
  fi

  if [ -n "${TIMEZONE:-}" ]; then
    opts+=(--timezone=${TIMEZONE})
  else
    opts+=(--timezone=Asia/Shanghai)
  fi

  local tmp_image="${TMPDIR}/${distro}-${flavor}-${build_version}.qcow2"
  cp -a "${base_image}" ${tmp_image}

  echo "Start virt-customize..."
  echo "+ virt-customize --format auto -a ${tmp_image} ${opts[@]}"
  virt-customize --format auto -a "${tmp_image}" "${opts[@]}"
  
  echo "Customization finished! Calculating SHA256SUM..."
  sha256sum "${tmp_image}" > "${tmp_image}.SHA256"
  mv "${tmp_image}"{,.SHA256} "${OUTPUT}/"
  echo "Saved image to ${OUTPUT}/${distro}-${flavor}-${build_version}.qcow2"
}

main "$@"